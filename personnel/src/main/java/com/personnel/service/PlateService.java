package com.personnel.service;import com.common.response.ResponseResult;import com.common.utils.HttpRequestUtil;import com.google.common.collect.Maps;import com.personnel.core.base.BaseMapper;import com.personnel.core.base.BaseService;import com.personnel.core.base.MybatisBaseMapper;import com.personnel.domain.output.EmployeesOutput;import com.personnel.mapper.jpa.PlateRepository;import com.personnel.mapper.mybatis.EmployeesMapper;import com.personnel.mapper.mybatis.PlateMapper;import com.personnel.model.Person;import com.personnel.model.Plate;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.beans.factory.annotation.Value;import org.springframework.stereotype.Service;import org.springframework.web.bind.MethodArgumentNotValidException;import java.beans.IntrospectionException;import java.lang.reflect.InvocationTargetException;import java.util.Date;import java.util.List;import java.util.Map;/** * @author: Administrator */@Servicepublic class PlateService extends BaseService<Plate,Plate,Integer> {  @Autowired  private PlateMapper plateMapper;  @Autowired  private EmployeesMapper employeesMapper;  @Autowired  private PlateRepository repository;  @Autowired  private PersonService personService;  private static final Logger log = LoggerFactory.getLogger(PlateService.class);  @Value("${hik.addCarInfo_URL}")  private String addCarInfo_URL;  @Value("${hik.deleteCarInfo_URL}")  private String deleteCarInfo_URL;  @Override  public BaseMapper<Plate, Integer> getMapper() {    return repository;  }  @Override  public MybatisBaseMapper<Plate> getMybatisBaseMapper() {    return plateMapper;  }  //海康下发车牌号  public void addCarInfo() throws Exception{    //人员状态 0 待下发    List<Plate> people = plateMapper.selectByState(0);    if(people != null && people.size() > 0){      for(Plate plate : people){        Map<String, Object> param = Maps.newHashMap();        param.put("carType",1);//车辆类型：小型车        param.put("plateNo",plate.getPlateNo());//车牌号        param.put("name",plate.getName());//驾驶人姓名        param.put("personNo",plate.getPersonNo());//卡号        param.put("personId",plate.getPersonId());//车主Id        try {          //海康下发车牌号          ResponseResult result  = HttpRequestUtil.sendPostRequest(addCarInfo_URL,param);          if(result.getCode()==200){            plate.setState(1);            plate.setCreatedDateTime(new Date());            plate.setLastUpdateDateTime(new Date());            plate.setDescription((String) result.getData());            update(plate.getId(),plate);            log.info("---"+result.getMessage()+"---");          }else{            plate.setState(2);            plate.setDescription(result.getMessage());            plate.setCreatedDateTime(new Date());            plate.setLastUpdateDateTime(new Date());            update(plate.getId(),plate);          }        }catch(Exception e){          e.printStackTrace();          log.info("车牌下发到海康平台失败");        }      }    }  }  //海康删除车牌号  public void deleteCarInfo() throws Exception {    //人员状态 3 可删除    List<Plate> people = plateMapper.selectByState(3);    if(people != null && people.size() > 0) {      for (Plate plate : people) {        Map<String, Object> param = Maps.newHashMap();        param.put("plateNo", plate.getPlateNo());//车牌号        try {          //海康删除车牌号          ResponseResult result = HttpRequestUtil.sendPostRequest(deleteCarInfo_URL, param);          if(result.getCode() == 200){            plate.setState(5);            plate.setCreatedDateTime(new Date());            plate.setLastUpdateDateTime(new Date());            plate.setDescription((String)result.getData());            update(plate.getId(),plate);            log.info("---"+result.getMessage()+"---");          }else{            plate.setState(2);            plate.setDescription(result.getMessage());            plate.setCreatedDateTime(new Date());            plate.setLastUpdateDateTime(new Date());            update(plate.getId(),plate);          }        } catch (Exception e) {          e.printStackTrace();          log.info("从海康平台删除车牌号失败");        }      }    }  }  public List<Plate> getByPlateNo(String plateNo){    return plateMapper.selectByPlateNo(plateNo);  }  public List<Plate> getByPersonNo(String person){    return plateMapper.selectByPersonNo(person);  }  public void  addcard() throws InvocationTargetException, IntrospectionException, MethodArgumentNotValidException, IllegalAccessException {    List<EmployeesOutput> list=employeesMapper.selectAll(null);    int count=0;    if(list!=null&&list.size()>0){      for(EmployeesOutput employeesOutput:list){        if(employeesOutput.getPlateNo()!=null&&employeesOutput.getWorkingState()==1){          String[] strings=employeesOutput.getPlateNo().split(",");          Person person=personService.getByEmployeeId(employeesOutput.getId());          for(String s:strings){            List<Plate> plateList=getByPlateNo(s);            if(plateList==null||plateList.size()<1){              Plate plate=new Plate();              plate.setState(0);              if(person!=null){                plate.setPersonId(person.getPersonId());              }else {                plate.setPersonId(0);              }              plate.setPlateNo(s);              plate.setPhoneNo(employeesOutput.getPhoneNumber());              plate.setPersonNo(employeesOutput.getEmployeeNo());              plate.setName(employeesOutput.getName());              count++;              add(plate);            }          }        }      }    }    System.out.println(count);  }}